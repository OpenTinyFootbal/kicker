var CACHE_NAME = 'kicker-cache-v2';
var urlsToCache = [
'/kicker/app',
    {% for url in urls %}
    '{{ url }}',
    {% endfor %}
];

addToCache = function (request, response) {
    if (response.ok) {
        const copy = response.clone()
        caches.open(CACHE_NAME).then(function (cache) {
            cache.put(request, copy)
        }
        )
        return response
    }
}
fetchFromCache = function (event) {
    return caches.match(event.request).then(function (response) {
        if (!response) {
            throw Error('${event.request.url} not found in cache')
        }
        return response
    }
    )
}

offlineResponse = function () {
    return new Response('Sorry, the application is offline.')
}


respondFromCacheThenNetwork = function (event) {
  // Check cache first, then network
  const request = event.request
  event.respondWith(
    fetchFromCache(event)
      .catch(() => fetch(request))
      .then(response => addToCache(request, response))
      .catch(() => offlineResponse())
    )
}
respondFromNetworkThenCache = function (event) {
  // Check network first, then cache
  const request = event.request
  event.respondWith(
    fetch(request)
      //.then(response => addToCache(request, response))
      .catch(() => fetchFromCache(event))
      .catch(() => offlineResponse())
  )
}
shouldHandleFetch = function (event) {
    return (event.request.method.toLowerCase() === 'get') && (event.request.url.indexOf('google-analytics.com') === -1)
}



self.addEventListener('install', function (event) {
  // Perform install steps
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(function(cache) {
        console.log('Opened cache');
        return cache.addAll(urlsToCache);
      })
  );
});

self.addEventListener('fetch', function (event) {
    if (shouldHandleFetch(event)) {
        if (event.request.headers.get('Accept').indexOf('text/html') >= 0) {
            respondFromNetworkThenCache(event)
        } else {
            respondFromCacheThenNetwork(event)
        }
    }
});

